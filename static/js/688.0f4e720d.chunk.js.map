{"version":3,"file":"static/js/688.0f4e720d.chunk.js","mappings":"mUAEaA,EAAOC,EAAAA,GAAAA,KAAH,4CAIJC,EAAQD,EAAAA,GAAAA,MAAH,2CAILE,EAASF,EAAAA,GAAAA,OAAH,2C,SCwBnB,EA9BmB,SAAC,GAAsB,IAApBG,EAAmB,EAAnBA,aAClB,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACI,UAACP,EAAD,CACIQ,SAbW,SAAAC,GACfA,EAAEC,iBACEJ,GAKJF,EAAaE,GACbC,EAAc,KALVI,EAAAA,OAAAA,QAAe,uCAMtB,EAGG,WAGI,SAACT,EAAD,CACIU,KAAK,OACLC,MAAOP,EACPQ,SAAU,SAAAL,GAAC,OAAIF,EAAcE,EAAEM,OAAOF,MAA3B,KAEf,SAACV,EAAD,CACIS,KAAK,SADT,sBAKX,E,UC7BYI,EAAOf,EAAAA,GAAAA,GAAH,iDAKJgB,EAAOhB,EAAAA,GAAAA,GAAH,2CAIJiB,GAAajB,EAAAA,EAAAA,IAAOkB,EAAAA,GAAPlB,CAAH,yECUvB,EAnBwB,SAAC,GAAe,IAAbmB,EAAY,EAAZA,MACjBC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,SAACN,EAAD,UACCI,EAAMG,KAAI,SAAAC,GAAI,OACX,SAACP,EAAD,WACI,SAACC,EAAD,CACIO,GAAE,UAAKD,EAAKE,IACZC,MAAO,CAAEC,KAAMP,GAFnB,SAIKG,EAAKK,SALHL,EAAKE,GADL,KAYtB,ECiDD,EA7De,WACX,OAAkCrB,EAAAA,EAAAA,WAAS,GAA3C,eAAOyB,EAAP,KAAkBC,EAAlB,KACA,GAAsC1B,EAAAA,EAAAA,UAAS,IAA/C,eAAO2B,EAAP,KAAoBC,EAApB,KACA,GAAsCC,EAAAA,EAAAA,MAAtC,eAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAcF,EAAYG,IAAI,SAC9BC,GAAeC,EAAAA,EAAAA,SAAO,IAE5BC,EAAAA,EAAAA,YAAU,mCAAM,yFACRF,EAAaG,QADL,oDAKZH,EAAaG,SAAU,EAEJ,KAAhBL,EAPS,wDAUNM,EAAa,IAAIC,gBAVX,SAYRb,GAAa,GAZL,WAaec,EAAAA,EAAAA,GAAW,kBAAmBF,EAAYN,GAbzD,QAaFS,EAbE,OAcRb,GAAe,OAAIa,EAASC,UAdpB,kDAgBRpC,EAAAA,OAAAA,QAAe,uDAhBP,yBAkBRoB,GAAa,GAlBL,+CAqBL,kBAAMY,EAAWK,OAAjB,IArBK,+DAAN,GAuBP,CAACX,IAGJ,IAAMY,EAAY,mCAAG,WAAMpC,GAAN,gFACjBuB,EAAe,CAAEvB,MAAAA,IACH8B,EAAa,IAAIC,gBAFd,SAKbb,GAAa,GALA,UAMUc,EAAAA,EAAAA,GAAW,kBAAmBF,EAAY9B,GANpD,OAMPiC,EANO,OAObb,GAAe,OAAIa,EAASC,UAPf,kDASbpC,EAAAA,OAAAA,QAAe,uDATF,yBAWboB,GAAa,GAXA,qFAAH,sDAelB,OACI,gCACCD,IAAa,SAAC,IAAD,CAAYoB,MAAM,aAChC,SAAC,EAAD,CACI9C,aAAc6C,IAEjBjB,GACC,SAAC,EAAD,CAAiBZ,MAAOY,IACxB,OAGT,C,2ECjEDmB,IAAAA,SAAAA,QAAyB,6BACzB,IAGMN,EAAU,mCAAG,WAAOO,EAAaT,EAAYU,GAAhC,uFAEOF,IAAAA,IAAUC,EAAa,CACzCE,OAAQ,CACJC,QAPI,mCAQJZ,WAAAA,EACAU,MAAAA,KANO,cAETG,EAFS,yBASRA,EAAQC,MATA,2CAAH,0DAchB,K","sources":["components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","components/ListSearchFilms/ListSearchFilms.styled.js","components/ListSearchFilms/ListSearchFilms.jsx","pages/Movies/Movies.jsx","utilites/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Form = styled.form`\n    padding: 36px;\n`;\n\nexport const Input = styled.input`\n    padding: 8px;\n`;\n\nexport const Submit = styled.button`\n    padding: 8px;\n`;","import { useState } from \"react\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Input, Form, Submit } from \"./SearchForm.styled\";\n\nconst SearchForm = ({ onSubmitForm }) => {\n    const [valueInput, setValueInput] = useState('');\n\n    const makeSubmit = e => {\n        e.preventDefault();\n        if(!valueInput) {\n            Notify.failure('Please, write the name of the movie!');\n            return;\n        };\n\n        onSubmitForm(valueInput);\n        setValueInput('');\n    };\n\n    return (\n        <Form\n            onSubmit={makeSubmit}\n        >\n            <Input \n                type='text'\n                value={valueInput}\n                onChange={e => setValueInput(e.target.value)}\n            />\n            <Submit \n                type='submit'\n            >Search</Submit>\n        </Form>\n    )\n};\n\nexport default SearchForm;\n","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const List = styled.ul`\n    list-style: none;\n\n`;\n\nexport const Item = styled.li`\n    padding: 8px;\n`;\n\nexport const LinkStyled = styled(Link)`\n    text-decoration: none;\n    color: #5252d4;\n`;\n","import { useLocation } from \"react-router-dom\";\nimport { List, Item, LinkStyled } from \"./ListSearchFilms.styled\";\n\nconst ListSearchFilms = ({ items }) => {\n    const location = useLocation();\n\n    return (\n        <List>\n        {items.map(item => (\n            <Item key={item.id}>\n                <LinkStyled \n                    to={`${item.id}`} \n                    state={{ from: location}}\n                    >\n                    {item.title}\n                </LinkStyled>\n            </Item>\n        ))}\n        </List> \n    )\n};\n\nexport default ListSearchFilms;","import { useState, useEffect, useRef } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport SyncLoader from \"react-spinners/SyncLoader\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport fetchFilms from '../../utilites/api';\nimport SearchForm from 'components/SearchForm';\nimport ListSearchFilms from 'components/ListSearchFilms';\n\nconst Movies = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [searchFilms, setSearchFilms] = useState([]);\n    const [searchValue, setSearchValue] = useSearchParams();\n    const valueSearch = searchValue.get('value');\n    const isFirstMount = useRef(true);\n\n    useEffect(() => async () => {\n        if(!isFirstMount.current) {\n            return;\n        };\n\n        isFirstMount.current = false;\n\n        if(valueSearch === '') {\n            return;\n        };\n        const controller = new AbortController();\n        try {\n            setIsLoading(true);\n            const response = await fetchFilms('/3/search/movie', controller, valueSearch);\n            setSearchFilms([...response.results]);\n        } catch(error) {\n            Notify.failure('OOps! Error loading information. Please, try again!');\n        } finally {\n            setIsLoading(false);\n        };\n\n        return () => controller.abort();\n\n    }, [valueSearch]);\n\n    \n    const handleSubmit = async value => {\n        setSearchValue({ value });\n                const controller = new AbortController();\n\n        try {\n            setIsLoading(true);\n            const response = await fetchFilms('/3/search/movie', controller, value);\n            setSearchFilms([...response.results]);\n        } catch(error) {\n            Notify.failure('OOps! Error loading information. Please, try again!');\n        } finally {\n            setIsLoading(false);\n        };\n};\n\n    return (\n        <>\n        {isLoading && <SyncLoader color=\"#eb1736\" />}\n        <SearchForm \n            onSubmitForm={handleSubmit} \n        />\n        {searchFilms \n        ? <ListSearchFilms items={searchFilms} />\n        : null}\n    </>\n    );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '84bdbe2f4baecea0c1be28902afc6a5b';\n\n\nconst fetchFilms = async (typeRequest, controller, query) => {\n\n    const request = await axios.get(typeRequest, {\n        params: {\n            api_key: API_KEY,\n            controller,\n            query,\n        }\n    });\n    return request.data;\n};\n\n\n\nexport default fetchFilms;"],"names":["Form","styled","Input","Submit","onSubmitForm","useState","valueInput","setValueInput","onSubmit","e","preventDefault","Notify","type","value","onChange","target","List","Item","LinkStyled","Link","items","location","useLocation","map","item","to","id","state","from","title","isLoading","setIsLoading","searchFilms","setSearchFilms","useSearchParams","searchValue","setSearchValue","valueSearch","get","isFirstMount","useRef","useEffect","current","controller","AbortController","fetchFilms","response","results","abort","handleSubmit","color","axios","typeRequest","query","params","api_key","request","data"],"sourceRoot":""}