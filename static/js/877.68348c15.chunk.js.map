{"version":3,"file":"static/js/877.68348c15.chunk.js","mappings":"mSA8CA,EAxCa,WACT,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,MAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,mCAAM,6FAENC,EAAa,IAAIC,gBAFX,SAIRL,GAAa,GAJL,UAKeM,EAAAA,EAAAA,GAAW,YAAD,OAAaV,EAAb,YAAgCQ,GALzD,OAKFG,EALE,OAMRL,EAAYK,GANJ,gDAQRC,EAAAA,OAAAA,QAAe,uDARP,yBAURR,GAAa,GAVL,+CAaL,kBAAMI,EAAWK,OAAjB,IAbK,8DAAN,GAeP,CAACb,KAGA,gCACCG,IAAa,SAAC,IAAD,CAAYW,MAAM,YAC/BT,IACG,wBACKA,EAASU,KAAKC,KAAI,SAAAC,GAAI,OACnB,2BACI,gBAAKC,IAAG,8CAAyCD,EAAKE,cAAgBC,IAAKH,EAAKI,KAAOC,MAAM,QAAQ,aAAW,WAChH,wBAAKL,EAAKI,OACTJ,EAAKM,YAAa,uCAAeN,EAAKM,eAHlCN,EAAKO,GADK,QAWtC,C,2EC1CDC,IAAAA,SAAAA,QAAyB,6BACzB,IAGMf,EAAU,mCAAG,WAAOgB,EAAalB,EAAYmB,GAAhC,uFAEOF,IAAAA,IAAUC,EAAa,CACzCE,OAAQ,CACJC,QAPI,mCAQJrB,WAAAA,EACAmB,MAAAA,KANO,cAETG,EAFS,yBASRA,EAAQC,MATA,2CAAH,0DAchB,K","sources":["components/Cast/Cast.jsx","utilites/api.js"],"sourcesContent":["import SyncLoader from \"react-spinners/SyncLoader\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport fetchFilms from \"utilites/api\";\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [isLoading, setIsLoading] = useState(false);\n    const [infoCast, setInfoCast] = useState(null);\n\n    useEffect(() => async () => {\n\n        const controller = new AbortController();\n        try {\n            setIsLoading(true);\n            const response = await fetchFilms(`/3/movie/${movieId}/credits`, controller);\n            setInfoCast(response);\n        } catch (error) {\n            Notify.failure('OOps! Error loading information. Please, try again!');\n        } finally {\n            setIsLoading(false);\n        };\n\n        return () => controller.abort();\n\n    }, [movieId]);\n\n    return (\n        <>\n        {isLoading && <SyncLoader color=\"#eb1736\" />}\n        {infoCast && (\n            <ul>\n                {infoCast.cast.map(item => (\n                    <li key={item.id}>\n                        <img src={`https://image.tmdb.org/t/p/original/${item.profile_path}`} alt={item.name}  width='100px' min-height='150px' />\n                        <h3>{item.name}</h3>\n                        {item.character && <p>Character: {item.character}</p>}\n                    </li>\n                )) }\n            </ul>\n        )}\n        </>\n    );\n};\n\nexport default Cast;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '84bdbe2f4baecea0c1be28902afc6a5b';\n\n\nconst fetchFilms = async (typeRequest, controller, query) => {\n\n    const request = await axios.get(typeRequest, {\n        params: {\n            api_key: API_KEY,\n            controller,\n            query,\n        }\n    });\n    return request.data;\n};\n\n\n\nexport default fetchFilms;"],"names":["movieId","useParams","useState","isLoading","setIsLoading","infoCast","setInfoCast","useEffect","controller","AbortController","fetchFilms","response","Notify","abort","color","cast","map","item","src","profile_path","alt","name","width","character","id","axios","typeRequest","query","params","api_key","request","data"],"sourceRoot":""}